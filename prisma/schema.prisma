generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Users {
  userId    Int      @id @default(autoincrement()) @map("user_id")
  email     String   @unique @map("email")
  password  String   @map("password")
  name      String   @map("name")   // 동명이인 있을 수 있느니까 유니크 x 
  role      Role     @default(APPLICANT)  @map("role")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  resume  Resumes []  // 사용자(Users) 테이블과 이력서(Resumes) 테이블이 1:N 관계를 맺습니다. , 1명의 사용자는 N개의 이력서를 가진다.
  resumeLog ResumeLogs [] // 사용자(Users) 테이블과 이력서 로그(ResumeLogs) 테이블이 1:N 관계를 맺습니다. , 1명의 사용자는 N개의 이력서 로그를 가진다.
  @@map("users")
}

enum Role {
  RECRUITER
  APPLICANT
}

enum Status {
  APPLY
  DROP
  PASS
  INTERVIEW1
  INTERVIEW2
  FINAL_PASS
}

model Resumes {
  resumeId         Int       @id @default(autoincrement()) @map("resume_id")
  userId           Int       @map("user_id")   // 여기는 왜 또 유니크가 아니지? 혹시 어제 봤던 엑셀에서 이력서 조회 했을 때 쓴사람 아이디로 목록 조회 가능하니까?
  title            String    @map("title")
  selfIntroduction String    @db.Text @map("self_introduction")
  status           Status    @default(APPLY) @map("status")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  user   Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  resumeLog ResumeLogs []
  @@map("resumes")
}

model ResumeLogs {
  resumeLogId      Int       @id @default(autoincrement()) @map("resume_log_id")
  resumeId         Int       @map("resume_id")
  userId           Int       @map("user_id")   // 여기는 왜 또 유니크가 아니지? 혹시 어제 봤던 엑셀에서 이력서 조회 했을 때 쓴사람 아이디로 목록 조회 가능하니까?
  oldStatus        Status    @map("old_status")
  newStatus        Status    @map("new_status")
  reason           String    @map("reason")
  createdAt        DateTime  @default(now()) @map("created_at")

  user   Users   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  resume Resumes @relation(fields: [resumeId], references: [resumeId], onDelete: Cascade)
  
  @@map("resume_logs")
}